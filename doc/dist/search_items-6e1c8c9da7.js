searchNodes=[{"ref":"Benum.html","title":"Benum","type":"module","doc":""},{"ref":"Firmata.html","title":"Firmata","type":"module","doc":""},{"ref":"Firmata.Board.html","title":"Firmata.Board","type":"module","doc":"This module describes the board that is being communicated with and is the primary module that a user will interact with. Pin Modes Mode @input @output @analog @pwm @servo @shift @i2c @onewire @stepper @serial @ignore @ping_read @sonar @unknown"},{"ref":"Firmata.Board.html#child_spec/1","title":"Firmata.Board.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Firmata.Board.html#digital_write/3","title":"Firmata.Board.digital_write/3","type":"function","doc":""},{"ref":"Firmata.Board.html#init/1","title":"Firmata.Board.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Firmata.Board.html#neopixel/3","title":"Firmata.Board.neopixel/3","type":"function","doc":""},{"ref":"Firmata.Board.html#neopixel_brightness/2","title":"Firmata.Board.neopixel_brightness/2","type":"function","doc":""},{"ref":"Firmata.Board.html#neopixel_register/3","title":"Firmata.Board.neopixel_register/3","type":"function","doc":""},{"ref":"Firmata.Board.html#pin_state/2","title":"Firmata.Board.pin_state/2","type":"function","doc":""},{"ref":"Firmata.Board.html#report_analog_channel/3","title":"Firmata.Board.report_analog_channel/3","type":"function","doc":"Requests that the board &#39;report&#39; the value on channel to this process. It will send messages of the format: {:firmata, {:analog_read, channel, value}}"},{"ref":"Firmata.Board.html#set_pin_mode/3","title":"Firmata.Board.set_pin_mode/3","type":"function","doc":"Sets the pin to the given mode."},{"ref":"Firmata.Board.html#sonar_config/5","title":"Firmata.Board.sonar_config/5","type":"function","doc":""},{"ref":"Firmata.Board.html#start_link/3","title":"Firmata.Board.start_link/3","type":"function","doc":"Connects to the firmata host at port."},{"ref":"Firmata.Board.html#stop/1","title":"Firmata.Board.stop/1","type":"function","doc":""},{"ref":"Firmata.Board.html#sysex_write/3","title":"Firmata.Board.sysex_write/3","type":"function","doc":""},{"ref":"Firmata.Board.html#to_hex/1","title":"Firmata.Board.to_hex/1","type":"function","doc":"Converts a byte to a string hex representation. Returns the hex representation of byte Examples: iex&gt; Firmata.Protocol.Mixin.to_hex(&lt;&gt;) &quot;0xA&quot;"},{"ref":"Firmata.Protocol.html","title":"Firmata.Protocol","type":"module","doc":""},{"ref":"Firmata.Protocol.html#digital_write/3","title":"Firmata.Protocol.digital_write/3","type":"function","doc":""},{"ref":"Firmata.Protocol.html#parse/2","title":"Firmata.Protocol.parse/2","type":"function","doc":""},{"ref":"Firmata.Protocol.html#to_hex/1","title":"Firmata.Protocol.to_hex/1","type":"function","doc":"Converts a byte to a string hex representation. Returns the hex representation of byte Examples: iex&gt; Firmata.Protocol.Mixin.to_hex(&lt;&gt;) &quot;0xA&quot;"},{"ref":"Firmata.Protocol.Mixin.html","title":"Firmata.Protocol.Mixin","type":"module","doc":"Provides a number of convenience attributes for Firmata protocol commands."},{"ref":"Firmata.Protocol.Modes.html","title":"Firmata.Protocol.Modes","type":"module","doc":""},{"ref":"Firmata.Protocol.State.html","title":"Firmata.Protocol.State","type":"module","doc":""},{"ref":"Firmata.Protocol.State.html#pack/2","title":"Firmata.Protocol.State.pack/2","type":"function","doc":""},{"ref":"Firmata.Protocol.State.html#unpack/1","title":"Firmata.Protocol.State.unpack/1","type":"function","doc":""},{"ref":"Firmata.Protocol.Sysex.html","title":"Firmata.Protocol.Sysex","type":"module","doc":""},{"ref":"Firmata.Protocol.Sysex.html#analog_mapping_response/1","title":"Firmata.Protocol.Sysex.analog_mapping_response/1","type":"function","doc":""},{"ref":"Firmata.Protocol.Sysex.html#binary/1","title":"Firmata.Protocol.Sysex.binary/1","type":"function","doc":""},{"ref":"Firmata.Protocol.Sysex.html#capability_response/1","title":"Firmata.Protocol.Sysex.capability_response/1","type":"function","doc":""},{"ref":"Firmata.Protocol.Sysex.html#capability_response/2","title":"Firmata.Protocol.Sysex.capability_response/2","type":"function","doc":""},{"ref":"Firmata.Protocol.Sysex.html#firmware_query/1","title":"Firmata.Protocol.Sysex.firmware_query/1","type":"function","doc":""},{"ref":"Firmata.Protocol.Sysex.html#parse/1","title":"Firmata.Protocol.Sysex.parse/1","type":"function","doc":""},{"ref":"Firmata.Protocol.Sysex.html#parse/2","title":"Firmata.Protocol.Sysex.parse/2","type":"function","doc":""},{"ref":"Firmata.Protocol.Sysex.html#sonar_data/1","title":"Firmata.Protocol.Sysex.sonar_data/1","type":"function","doc":""},{"ref":"Firmata.Protocol.Sysex.html#to_hex/1","title":"Firmata.Protocol.Sysex.to_hex/1","type":"function","doc":"Converts a byte to a string hex representation. Returns the hex representation of byte Examples: iex&gt; Firmata.Protocol.Mixin.to_hex(&lt;&gt;) &quot;0xA&quot;"},{"ref":"Firmata.Writer.html","title":"Firmata.Writer","type":"module","doc":""},{"ref":"Firmata.Writer.html#child_spec/1","title":"Firmata.Writer.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Firmata.Writer.html#init/1","title":"Firmata.Writer.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. init_arg is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state}, except that it also sets a timeout. See the &quot;Timeouts&quot; section in the module documentation for more information. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Firmata.Writer.html#set_serial_interface/1","title":"Firmata.Writer.set_serial_interface/1","type":"function","doc":""},{"ref":"Firmata.Writer.html#start_link/1","title":"Firmata.Writer.start_link/1","type":"function","doc":""},{"ref":"Firmata.Writer.html#write/1","title":"Firmata.Writer.write/1","type":"function","doc":""},{"ref":"Firmata.Writer.State.html","title":"Firmata.Writer.State","type":"module","doc":""}]